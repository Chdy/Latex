\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{} include \PYGZlt{}arpa/inet.h\PYGZgt{}}
\PYG{c+c1}{//点分十进制转换为网络序}
\PYG{k+kt}{int} \PYG{n+nf}{inet\PYGZus{}aton}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{char} \PYG{o}{*}\PYG{n}{cp}\PYG{p}{,} \PYG{k}{struct} \PYG{n}{in\PYGZus{}addr} \PYG{o}{*}\PYG{n}{inp}\PYG{p}{);}

\PYG{c+c1}{//同上，但是已经废弃}
\PYG{n}{in\PYGZus{}addr\PYGZus{}t} \PYG{n+nf}{inet\PYGZus{}addr}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{char} \PYG{o}{*}\PYG{n}{cp}\PYG{p}{);}

\PYG{c+c1}{//将网络序转换为点分十进制，注意这里以结构体为参数}
\PYG{k+kt}{char} \PYG{o}{*}\PYG{n+nf}{inet\PYGZus{}ntoa}\PYG{p}{(}\PYG{k}{struct} \PYG{n}{in\PYGZus{}addr} \PYG{n}{in}\PYG{p}{);}

\PYG{c+cm}{/*}
\PYG{c+cm}{ * p表示表达，n表示数值，我个人习惯将n看为网络序}
\PYG{c+cm}{ * af用于表示地址族，取决于IPv4(AF\PYGZus{}INET)还是IPv6(AF\PYGZus{}INET6)}
\PYG{c+cm}{ */}

\PYG{c+cm}{/*}
\PYG{c+cm}{ * 错误返回\PYGZhy{}1，正确返回1，输入格式错误返回0}
\PYG{c+cm}{ * 一般第二个参数使用点分十进制字符串，第三个参数为地址结构体的指针}
\PYG{c+cm}{ * 点分十进制转换为网络序}
\PYG{c+cm}{ * 注意：此函数转换时会考虑本机的大小端特性}
\PYG{c+cm}{ */}
\PYG{k+kt}{int} \PYG{n+nf}{inet\PYGZus{}pton}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{af}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{char} \PYG{o}{*}\PYG{n}{src}\PYG{p}{,} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{dst}\PYG{p}{);}

\PYG{c+cm}{/*}
\PYG{c+cm}{ * 将网络序转换为点分十进制，size用于表示dst缓冲区的大小}
\PYG{c+cm}{ * src用于地址结构题的指针}
\PYG{c+cm}{ * 将网络序转换为点分十进制}
\PYG{c+cm}{ * 注意：此函数将参数视为网络字节序转换成字符串，所以对于小端法机器}
\PYG{c+cm}{ * 如果你想要提供自己的参数给它，可以先使用htonl再进行传递}
\PYG{c+cm}{ */}
\PYG{k}{const} \PYG{k+kt}{char} \PYG{o}{*}\PYG{n+nf}{inet\PYGZus{}ntop}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{af}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{src}\PYG{p}{,}
                      \PYG{k+kt}{char} \PYG{o}{*}\PYG{n}{dst}\PYG{p}{,} \PYG{k+kt}{socklen\PYGZus{}t} \PYG{n}{size}\PYG{p}{);}
\end{Verbatim}
